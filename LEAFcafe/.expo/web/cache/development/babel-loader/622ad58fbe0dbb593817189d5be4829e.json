{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"D:\\\\Mobile\\\\LEAFcafe\\\\node_modules\\\\react-native-maps\\\\lib\\\\components\\\\MapView.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar CameraShape = PropTypes.shape({\n  center: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired\n  }),\n  pitch: PropTypes.number.isRequired,\n  heading: PropTypes.number.isRequired,\n  altitude: PropTypes.number.isRequired,\n  zoom: PropTypes.number.isRequired\n});\nvar viewPropTypes = ViewPropTypes || View.propTypes;\n\nvar propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  provider: PropTypes.oneOf(['google']),\n  style: viewPropTypes.style,\n  customMapStyle: PropTypes.array,\n  customMapStyleString: PropTypes.string,\n  showsUserLocation: PropTypes.bool,\n  userLocationAnnotationTitle: PropTypes.string,\n  showsMyLocationButton: PropTypes.bool,\n  followsUserLocation: PropTypes.bool,\n  showsPointsOfInterest: PropTypes.bool,\n  showsCompass: PropTypes.bool,\n  zoomEnabled: PropTypes.bool,\n  zoomTapEnabled: PropTypes.bool,\n  zoomControlEnabled: PropTypes.bool,\n  rotateEnabled: PropTypes.bool,\n  cacheEnabled: PropTypes.bool,\n  loadingEnabled: PropTypes.bool,\n  loadingBackgroundColor: ColorPropType,\n  loadingIndicatorColor: ColorPropType,\n  scrollEnabled: PropTypes.bool,\n  pitchEnabled: PropTypes.bool,\n  toolbarEnabled: PropTypes.bool,\n  moveOnMarkerPress: PropTypes.bool,\n  showsScale: PropTypes.bool,\n  showsBuildings: PropTypes.bool,\n  showsTraffic: PropTypes.bool,\n  showsIndoors: PropTypes.bool,\n  showsIndoorLevelPicker: PropTypes.bool,\n  mapType: PropTypes.oneOf(Object.values(MAP_TYPES)),\n  region: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired\n  }),\n  initialRegion: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired\n  }),\n  camera: CameraShape,\n  initialCamera: CameraShape,\n  liteMode: PropTypes.bool,\n  mapPadding: EdgeInsetsPropType,\n  paddingAdjustmentBehavior: PropTypes.oneOf(['always', 'automatic', 'never']),\n  maxDelta: PropTypes.number,\n  minDelta: PropTypes.number,\n  legalLabelInsets: EdgeInsetsPropType,\n  onMapReady: PropTypes.func,\n  onMapLoaded: PropTypes.func,\n  onKmlReady: PropTypes.func,\n  onRegionChange: PropTypes.func,\n  onRegionChangeComplete: PropTypes.func,\n  onPress: PropTypes.func,\n  onDoublePress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  onUserLocationChange: PropTypes.func,\n  onPanDrag: PropTypes.func,\n  onPoiClick: PropTypes.func,\n  onMarkerPress: PropTypes.func,\n  onMarkerSelect: PropTypes.func,\n  onMarkerDeselect: PropTypes.func,\n  onCalloutPress: PropTypes.func,\n  onMarkerDragStart: PropTypes.func,\n  onMarkerDrag: PropTypes.func,\n  onMarkerDragEnd: PropTypes.func,\n  minZoomLevel: PropTypes.number,\n  maxZoomLevel: PropTypes.number,\n  kmlSrc: PropTypes.string,\n  compassOffset: PointPropType,\n  onIndoorLevelActivated: PropTypes.func,\n  onIndoorBuildingFocused: PropTypes.func\n});\n\nvar MapView = function (_React$Component) {\n  _inherits(MapView, _React$Component);\n\n  var _super = _createSuper(MapView);\n\n  function MapView(props) {\n    var _this;\n\n    _classCallCheck(this, MapView);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isReady: Platform.OS === 'ios'\n    };\n    _this._onMapReady = _this._onMapReady.bind(_assertThisInitialized(_this));\n    _this._onMarkerPress = _this._onMarkerPress.bind(_assertThisInitialized(_this));\n    _this._onChange = _this._onChange.bind(_assertThisInitialized(_this));\n    _this._onLayout = _this._onLayout.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(MapView, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        provider: this.props.provider\n      };\n    }\n  }, {\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps) {\n      if (this.state.isReady && this.props.customMapStyle !== prevProps.customMapStyle) {\n        this._updateStyle(this.props);\n      }\n\n      return this.props.region || null;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, region) {\n      var a = this.__lastRegion;\n      var b = region;\n\n      if (!a || !b) {\n        return;\n      }\n\n      if (a.latitude !== b.latitude || a.longitude !== b.longitude || a.latitudeDelta !== b.latitudeDelta || a.longitudeDelta !== b.longitudeDelta) {\n        this.map.setNativeProps({\n          region: b\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var isReady = this.state.isReady;\n\n      if (isReady) {\n        this._updateStyle(this.props);\n      }\n    }\n  }, {\n    key: \"_updateStyle\",\n    value: function _updateStyle(props) {\n      var customMapStyle = props.customMapStyle;\n      this.map.setNativeProps({\n        customMapStyleString: JSON.stringify(customMapStyle)\n      });\n    }\n  }, {\n    key: \"_onMapReady\",\n    value: function _onMapReady() {\n      var _this$props = this.props,\n          region = _this$props.region,\n          initialRegion = _this$props.initialRegion,\n          onMapReady = _this$props.onMapReady;\n\n      if (region) {\n        this.map.setNativeProps({\n          region: region\n        });\n      } else if (initialRegion) {\n        this.map.setNativeProps({\n          initialRegion: initialRegion\n        });\n      }\n\n      this._updateStyle(this.props);\n\n      this.setState({\n        isReady: true\n      }, function () {\n        if (onMapReady) {\n          onMapReady();\n        }\n      });\n    }\n  }, {\n    key: \"_onLayout\",\n    value: function _onLayout(e) {\n      var layout = e.nativeEvent.layout;\n\n      if (!layout.width || !layout.height) {\n        return;\n      }\n\n      if (this.state.isReady && !this.__layoutCalled) {\n        var _this$props2 = this.props,\n            region = _this$props2.region,\n            initialRegion = _this$props2.initialRegion;\n\n        if (region) {\n          this.__layoutCalled = true;\n          this.map.setNativeProps({\n            region: region\n          });\n        } else if (initialRegion) {\n          this.__layoutCalled = true;\n          this.map.setNativeProps({\n            initialRegion: initialRegion\n          });\n        }\n      }\n\n      if (this.props.onLayout) {\n        this.props.onLayout(e);\n      }\n    }\n  }, {\n    key: \"_onMarkerPress\",\n    value: function _onMarkerPress(event) {\n      if (this.props.onMarkerPress) {\n        this.props.onMarkerPress(event.nativeEvent);\n      }\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(event) {\n      this.__lastRegion = event.nativeEvent.region;\n\n      if (event.nativeEvent.continuous) {\n        if (this.props.onRegionChange) {\n          this.props.onRegionChange(event.nativeEvent.region);\n        }\n      } else if (this.props.onRegionChangeComplete) {\n        this.props.onRegionChangeComplete(event.nativeEvent.region);\n      }\n    }\n  }, {\n    key: \"getCamera\",\n    value: function getCamera() {\n      if (Platform.OS === 'android') {\n        return NativeModules.AirMapModule.getCamera(this._getHandle());\n      } else if (Platform.OS === 'ios') {\n        return this._runCommand('getCamera', []);\n      }\n\n      return Promise.reject('getCamera not supported on this platform');\n    }\n  }, {\n    key: \"setCamera\",\n    value: function setCamera(camera) {\n      this._runCommand('setCamera', [camera]);\n    }\n  }, {\n    key: \"animateCamera\",\n    value: function animateCamera(camera, opts) {\n      this._runCommand('animateCamera', [camera, opts && opts.duration || 500]);\n    }\n  }, {\n    key: \"animateToNavigation\",\n    value: function animateToNavigation(location, bearing, angle, duration) {\n      console.warn('animateToNavigation() is deprecated, use animateCamera() instead');\n\n      this._runCommand('animateToNavigation', [location, bearing, angle, duration || 500]);\n    }\n  }, {\n    key: \"animateToRegion\",\n    value: function animateToRegion(region, duration) {\n      this._runCommand('animateToRegion', [region, duration || 500]);\n    }\n  }, {\n    key: \"animateToCoordinate\",\n    value: function animateToCoordinate(latLng, duration) {\n      console.warn('animateToCoordinate() is deprecated, use animateCamera() instead');\n\n      this._runCommand('animateToCoordinate', [latLng, duration || 500]);\n    }\n  }, {\n    key: \"animateToBearing\",\n    value: function animateToBearing(bearing, duration) {\n      console.warn('animateToBearing() is deprecated, use animateCamera() instead');\n\n      this._runCommand('animateToBearing', [bearing, duration || 500]);\n    }\n  }, {\n    key: \"animateToViewingAngle\",\n    value: function animateToViewingAngle(angle, duration) {\n      console.warn('animateToViewingAngle() is deprecated, use animateCamera() instead');\n\n      this._runCommand('animateToViewingAngle', [angle, duration || 500]);\n    }\n  }, {\n    key: \"fitToElements\",\n    value: function fitToElements(animated) {\n      this._runCommand('fitToElements', [animated]);\n    }\n  }, {\n    key: \"fitToSuppliedMarkers\",\n    value: function fitToSuppliedMarkers(markers) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$edgePadding = options.edgePadding,\n          edgePadding = _options$edgePadding === void 0 ? {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      } : _options$edgePadding,\n          _options$animated = options.animated,\n          animated = _options$animated === void 0 ? true : _options$animated;\n\n      this._runCommand('fitToSuppliedMarkers', [markers, edgePadding, animated]);\n    }\n  }, {\n    key: \"fitToCoordinates\",\n    value: function fitToCoordinates() {\n      var coordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$edgePadding2 = options.edgePadding,\n          edgePadding = _options$edgePadding2 === void 0 ? {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      } : _options$edgePadding2,\n          _options$animated2 = options.animated,\n          animated = _options$animated2 === void 0 ? true : _options$animated2;\n\n      this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);\n    }\n  }, {\n    key: \"getMapBoundaries\",\n    value: function getMapBoundaries() {\n      return _regeneratorRuntime.async(function getMapBoundaries$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS === 'android')) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(NativeModules.AirMapModule.getMapBoundaries(this._getHandle()));\n\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 6:\n              if (!(Platform.OS === 'ios')) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(this._runCommand('getMapBoundaries', []));\n\n            case 9:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 10:\n              return _context.abrupt(\"return\", Promise.reject('getMapBoundaries not supported on this platform'));\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setMapBoundaries\",\n    value: function setMapBoundaries(northEast, southWest) {\n      this._runCommand('setMapBoundaries', [northEast, southWest]);\n    }\n  }, {\n    key: \"setIndoorActiveLevelIndex\",\n    value: function setIndoorActiveLevelIndex(activeLevelIndex) {\n      this._runCommand('setIndoorActiveLevelIndex', [activeLevelIndex]);\n    }\n  }, {\n    key: \"takeSnapshot\",\n    value: function takeSnapshot(args) {\n      var _this2 = this;\n\n      if (Platform.OS === 'ios' && arguments.length === 4) {\n        console.warn('Old takeSnapshot API has been deprecated; will be removed in the near future');\n        var width = arguments[0];\n        var height = arguments[1];\n        var region = arguments[2];\n        var callback = arguments[3];\n\n        this._runCommand('takeSnapshot', [width || 0, height || 0, region || {}, 'png', 1, 'legacy', callback]);\n\n        return undefined;\n      }\n\n      var config = {\n        width: args.width || 0,\n        height: args.height || 0,\n        region: args.region || {},\n        format: args.format || 'png',\n        quality: args.quality || 1.0,\n        result: args.result || 'file'\n      };\n\n      if (config.format !== 'png' && config.format !== 'jpg') {\n        throw new Error('Invalid format specified');\n      }\n\n      if (config.result !== 'file' && config.result !== 'base64') {\n        throw new Error('Invalid result specified');\n      }\n\n      if (Platform.OS === 'android') {\n        return NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);\n      } else if (Platform.OS === 'ios') {\n        return new Promise(function (resolve, reject) {\n          _this2._runCommand('takeSnapshot', [config.width, config.height, config.region, config.format, config.quality, config.result, function (err, snapshot) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(snapshot);\n            }\n          }]);\n        });\n      }\n\n      return Promise.reject('takeSnapshot not supported on this platform');\n    }\n  }, {\n    key: \"pointForCoordinate\",\n    value: function pointForCoordinate(coordinate) {\n      if (Platform.OS === 'android') {\n        return NativeModules.AirMapModule.pointForCoordinate(this._getHandle(), coordinate);\n      } else if (Platform.OS === 'ios') {\n        return this._runCommand('pointForCoordinate', [coordinate]);\n      }\n\n      return Promise.reject('pointForCoordinate not supported on this platform');\n    }\n  }, {\n    key: \"coordinateForPoint\",\n    value: function coordinateForPoint(point) {\n      if (Platform.OS === 'android') {\n        return NativeModules.AirMapModule.coordinateForPoint(this._getHandle(), point);\n      } else if (Platform.OS === 'ios') {\n        return this._runCommand('coordinateForPoint', [point]);\n      }\n\n      return Promise.reject('coordinateForPoint not supported on this platform');\n    }\n  }, {\n    key: \"getMarkersFrames\",\n    value: function getMarkersFrames() {\n      var onlyVisible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (Platform.OS === 'ios') {\n        return this._runCommand('getMarkersFrames', [onlyVisible]);\n      }\n\n      return Promise.reject('getMarkersFrames not supported on this platform');\n    }\n  }, {\n    key: \"boundingBoxForRegion\",\n    value: function boundingBoxForRegion(region) {\n      return {\n        northEast: {\n          latitude: region.latitude + region.latitudeDelta / 2,\n          longitude: region.longitude + region.longitudeDelta / 2\n        },\n        southWest: {\n          latitude: region.latitude - region.latitudeDelta / 2,\n          longitude: region.longitude - region.longitudeDelta / 2\n        }\n      };\n    }\n  }, {\n    key: \"_uiManagerCommand\",\n    value: function _uiManagerCommand(name) {\n      var UIManager = NativeModules.UIManager;\n      var componentName = getAirMapName(this.props.provider);\n\n      if (!UIManager.getViewManagerConfig) {\n        return UIManager[componentName].Commands[name];\n      }\n\n      return UIManager.getViewManagerConfig(componentName).Commands[name];\n    }\n  }, {\n    key: \"_mapManagerCommand\",\n    value: function _mapManagerCommand(name) {\n      var managerName = getAirMapName(this.props.provider);\n\n      if (managerName === 'UI') {\n        var UIManager = NativeModules.UIManager;\n\n        if (!UIManager.getViewManagerConfig) {\n          return UIManager[name];\n        }\n\n        return UIManager.getViewManagerConfig(name);\n      }\n\n      return NativeModules[getAirMapName(this.props.provider) + \"Manager\"][name];\n    }\n  }, {\n    key: \"_getHandle\",\n    value: function _getHandle() {\n      return findNodeHandle(this.map);\n    }\n  }, {\n    key: \"_runCommand\",\n    value: function _runCommand(name, args) {\n      switch (Platform.OS) {\n        case 'android':\n          return NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this._uiManagerCommand(name), args);\n\n        case 'ios':\n          return this._mapManagerCommand(name).apply(void 0, [this._getHandle()].concat(_toConsumableArray(args)));\n\n        default:\n          return Promise.reject(\"Invalid platform was passed: \" + Platform.OS);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var props;\n\n      if (this.state.isReady) {\n        props = _objectSpread({\n          region: null,\n          initialRegion: null,\n          onMarkerPress: this._onMarkerPress,\n          onChange: this._onChange,\n          onMapReady: this._onMapReady,\n          onLayout: this._onLayout\n        }, this.props);\n\n        if (Platform.OS === 'ios' && props.provider === ProviderConstants.PROVIDER_DEFAULT && GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)) {\n          props.mapType = MAP_TYPES.standard;\n        }\n\n        props.handlePanDrag = !!props.onPanDrag;\n      } else {\n        props = {\n          style: this.props.style,\n          region: null,\n          initialRegion: null,\n          onMarkerPress: this._onMarkerPress,\n          onChange: this._onChange,\n          onMapReady: this._onMapReady,\n          onLayout: this._onLayout\n        };\n      }\n\n      if (Platform.OS === 'android' && this.props.liteMode) {\n        return React.createElement(AIRMapLite, _extends({\n          ref: function ref(_ref) {\n            _this3.map = _ref;\n          }\n        }, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 984,\n            columnNumber: 9\n          }\n        }));\n      }\n\n      var AIRMap = getAirMapComponent(this.props.provider);\n      return React.createElement(AIRMap, _extends({\n        ref: function ref(_ref2) {\n          _this3.map = _ref2;\n        }\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 996,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return MapView;\n}(React.Component);\n\nMapView.propTypes = propTypes;\nMapView.viewConfig = viewConfig;\nMapView.childContextTypes = childContextTypes;\nMapView.MAP_TYPES = MAP_TYPES;\n\nvar nativeComponent = function nativeComponent(Component) {\n  return requireNativeComponent(Component, MapView, {\n    nativeOnly: {\n      onChange: true,\n      onMapReady: true,\n      onKmlReady: true,\n      handlePanDrag: true\n    }\n  });\n};\n\nvar airMaps = {\n  default: nativeComponent('AIRMap')\n};\n\nif (Platform.OS === 'android') {\n  airMaps.google = airMaps.default;\n} else {\n  airMaps.google = googleMapIsInstalled ? nativeComponent('AIRGoogleMap') : createNotSupportedComponent('react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.');\n}\n\nvar getAirMapComponent = function getAirMapComponent(provider) {\n  return airMaps[provider || 'default'];\n};\n\nvar AIRMapLite;\n\nif (!NativeModules.UIManager.getViewManagerConfig) {\n  AIRMapLite = NativeModules.UIManager.AIRMapLite && requireNativeComponent('AIRMapLite', MapView, {\n    nativeOnly: {\n      onChange: true,\n      onMapReady: true,\n      handlePanDrag: true\n    }\n  });\n} else {\n  AIRMapLite = NativeModules.UIManager.getViewManagerConfig('AIRMapLite') && requireNativeComponent('AIRMapLite', MapView, {\n    nativeOnly: {\n      onChange: true,\n      onMapReady: true,\n      handlePanDrag: true\n    }\n  });\n}\n\nexport var Animated = RNAnimated.createAnimatedComponent(MapView);\nexport var ProviderPropType = PropTypes.oneOf(Object.values(ProviderConstants));\nMapView.Marker = MapMarker;\nMapView.Polyline = MapPolyline;\nMapView.Polygon = MapPolygon;\nMapView.Circle = MapCircle;\nMapView.UrlTile = MapUrlTile;\nMapView.MapWMSTile = MapWMSTile;\nMapView.LocalTile = MapLocalTile;\nMapView.Heatmap = MapHeatMap;\nMapView.Overlay = MapOverlay;\nMapView.Callout = MapCallout;\nMapView.CalloutSubview = MapCalloutSubview;\n\n_extends(MapView, ProviderConstants);\n\nMapView.ProviderPropType = ProviderPropType;\nMapView.Animated = Animated;\nMapView.AnimatedRegion = AnimatedRegion;\nMapView.Geojson = Geojson;\nexport default MapView;","map":{"version":3,"sources":["D:/Mobile/LEAFcafe/node_modules/react-native-maps/lib/components/MapView.js"],"names":["CameraShape","PropTypes","shape","center","latitude","number","isRequired","longitude","pitch","heading","altitude","zoom","viewPropTypes","ViewPropTypes","View","propTypes","provider","oneOf","style","customMapStyle","array","customMapStyleString","string","showsUserLocation","bool","userLocationAnnotationTitle","showsMyLocationButton","followsUserLocation","showsPointsOfInterest","showsCompass","zoomEnabled","zoomTapEnabled","zoomControlEnabled","rotateEnabled","cacheEnabled","loadingEnabled","loadingBackgroundColor","ColorPropType","loadingIndicatorColor","scrollEnabled","pitchEnabled","toolbarEnabled","moveOnMarkerPress","showsScale","showsBuildings","showsTraffic","showsIndoors","showsIndoorLevelPicker","mapType","Object","values","MAP_TYPES","region","latitudeDelta","longitudeDelta","initialRegion","camera","initialCamera","liteMode","mapPadding","EdgeInsetsPropType","paddingAdjustmentBehavior","maxDelta","minDelta","legalLabelInsets","onMapReady","func","onMapLoaded","onKmlReady","onRegionChange","onRegionChangeComplete","onPress","onDoublePress","onLongPress","onUserLocationChange","onPanDrag","onPoiClick","onMarkerPress","onMarkerSelect","onMarkerDeselect","onCalloutPress","onMarkerDragStart","onMarkerDrag","onMarkerDragEnd","minZoomLevel","maxZoomLevel","kmlSrc","compassOffset","PointPropType","onIndoorLevelActivated","onIndoorBuildingFocused","MapView","props","state","isReady","Platform","OS","_onMapReady","bind","_onMarkerPress","_onChange","_onLayout","prevProps","_updateStyle","prevState","a","__lastRegion","b","map","setNativeProps","JSON","stringify","setState","e","layout","nativeEvent","width","height","__layoutCalled","onLayout","event","continuous","NativeModules","AirMapModule","getCamera","_getHandle","_runCommand","Promise","reject","opts","duration","location","bearing","angle","console","warn","latLng","animated","markers","options","edgePadding","top","right","bottom","left","coordinates","getMapBoundaries","northEast","southWest","activeLevelIndex","args","arguments","length","callback","undefined","config","format","quality","result","Error","takeSnapshot","resolve","err","snapshot","coordinate","pointForCoordinate","point","coordinateForPoint","onlyVisible","name","UIManager","componentName","getAirMapName","getViewManagerConfig","Commands","managerName","findNodeHandle","dispatchViewManagerCommand","_uiManagerCommand","_mapManagerCommand","onChange","ProviderConstants","PROVIDER_DEFAULT","GOOGLE_MAPS_ONLY_TYPES","includes","standard","handlePanDrag","ref","AIRMap","getAirMapComponent","React","Component","viewConfig","childContextTypes","nativeComponent","requireNativeComponent","nativeOnly","airMaps","default","google","googleMapIsInstalled","createNotSupportedComponent","AIRMapLite","Animated","RNAnimated","createAnimatedComponent","ProviderPropType","Marker","MapMarker","Polyline","MapPolyline","Polygon","MapPolygon","Circle","MapCircle","UrlTile","MapUrlTile","MapWMSTile","LocalTile","MapLocalTile","Heatmap","MapHeatMap","Overlay","MapOverlay","Callout","MapCallout","CalloutSubview","MapCalloutSubview","AnimatedRegion","Geojson"],"mappings":"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","sourcesContent":["  /**\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  EdgeInsetsPropType,\n  PointPropType,\n  Platform,\n  Animated as RNAnimated,\n  requireNativeComponent,\n  NativeModules,\n  ColorPropType,\n  findNodeHandle,\n  ViewPropTypes,\n  View,\n} from 'react-native';\nimport MapMarker from './MapMarker';\nimport MapPolyline from './MapPolyline';\nimport MapPolygon from './MapPolygon';\nimport MapCircle from './MapCircle';\nimport MapCallout from './MapCallout';\nimport MapCalloutSubview from './MapCalloutSubview';\nimport MapOverlay from './MapOverlay';\nimport MapUrlTile from './MapUrlTile';\nimport MapWMSTile from './MapWMSTile';\nimport MapLocalTile from './MapLocalTile';\nimport MapHeatMap from './MapHeatmap';\nimport AnimatedRegion from './AnimatedRegion';\nimport Geojson from './Geojson';\nimport {\n  contextTypes as childContextTypes,\n  getAirMapName,\n  googleMapIsInstalled,\n  createNotSupportedComponent,\n} from './decorateMapComponent';\nimport * as ProviderConstants from './ProviderConstants';\n\nexport const MAP_TYPES = {\n  STANDARD: 'standard',\n  SATELLITE: 'satellite',\n  HYBRID: 'hybrid',\n  TERRAIN: 'terrain',\n  NONE: 'none',\n  MUTEDSTANDARD: 'mutedStandard',\n};\n\nconst GOOGLE_MAPS_ONLY_TYPES = [MAP_TYPES.TERRAIN, MAP_TYPES.NONE];\n\nconst viewConfig = {\n  uiViewClassName: 'AIR<provider>Map',\n  validAttributes: {\n    region: true,\n  },\n};\n\n/**\n * Defines the map camera.\n */\nconst CameraShape = PropTypes.shape({\n  center: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n  }),\n  pitch: PropTypes.number.isRequired,\n  heading: PropTypes.number.isRequired,\n  altitude: PropTypes.number.isRequired,\n  zoom: PropTypes.number.isRequired,\n});\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n  /**\n   * When provider is \"google\", we will use GoogleMaps.\n   * Any value other than \"google\" will default to using\n   * MapKit in iOS or GoogleMaps in android as the map provider.\n   */\n  provider: PropTypes.oneOf(['google']),\n\n  /**\n   * Used to style and layout the `MapView`.  See `StyleSheet.js` and\n   * `ViewStylePropTypes.js` for more info.\n   */\n  style: viewPropTypes.style,\n\n  /**\n   * A json object that describes the style of the map. This is transformed to a string\n   * and saved in mayStyleString to be sent to android and ios\n   * https://developers.google.com/maps/documentation/ios-sdk/styling#use_a_string_resource\n   * https://developers.google.com/maps/documentation/android-api/styling\n   */\n  customMapStyle: PropTypes.array,\n\n  /**\n   * A json string that describes the style of the map\n   * https://developers.google.com/maps/documentation/ios-sdk/styling#use_a_string_resource\n   * https://developers.google.com/maps/documentation/android-api/styling\n   */\n  customMapStyleString: PropTypes.string,\n\n  /**\n   * If `true` the app will ask for the user's location.\n   * Default value is `false`.\n   *\n   * **NOTE**: You need to add NSLocationWhenInUseUsageDescription key in\n   * Info.plist to enable geolocation, otherwise it is going\n   * to *fail silently*! You will also need to add an explanation for why\n   * you need the users location against `NSLocationWhenInUseUsageDescription` in Info.plist.\n   * Otherwise Apple may reject your app submission.\n   */\n  showsUserLocation: PropTypes.bool,\n\n  /**\n   * The title of the annotation for current user location. This only works if\n   * `showsUserLocation` is true.\n   * There is a default value `My Location` set by MapView.\n   *\n   * @platform ios\n   */\n  userLocationAnnotationTitle: PropTypes.string,\n\n  /**\n   * If `false` hide the button to move map to the current user's location.\n   * Default value is `true`.\n   *\n   * @platform android\n   */\n  showsMyLocationButton: PropTypes.bool,\n\n  /**\n   * If `true` the map will focus on the user's location. This only works if\n   * `showsUserLocation` is true and the user has shared their location.\n   * Default value is `false`.\n   *\n   * @platform ios\n   */\n  followsUserLocation: PropTypes.bool,\n\n  /**\n   * If `false` points of interest won't be displayed on the map.\n   * Default value is `true`.\n   *\n   */\n  showsPointsOfInterest: PropTypes.bool,\n\n  /**\n   * If `false` compass won't be displayed on the map.\n   * Default value is `true`.\n   *\n   * @platform ios\n   */\n  showsCompass: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to pinch/zoom the map.\n   * Default value is `true`.\n   *\n   */\n  zoomEnabled: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to double tap to zoom the map.\n   * However it will greatly decrease delay of tap gesture recognition.\n   * Default value is `true`.\n   *\n   */\n  zoomTapEnabled: PropTypes.bool,\n\n  /**\n   *If `false` the user won't be able to zoom the map\n   * Default value is `true`.\n   *\n   *@platform android\n   */\n  zoomControlEnabled: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to pinch/rotate the map.\n   * Default value is `true`.\n   *\n   */\n  rotateEnabled: PropTypes.bool,\n\n  /**\n   * If `true` the map will be cached to an Image for performance\n   * Default value is `false`.\n   *\n   */\n  cacheEnabled: PropTypes.bool,\n\n  /**\n   * If `true` the map will be showing a loading indicator\n   * Default value is `false`.\n   *\n   */\n  loadingEnabled: PropTypes.bool,\n\n  /**\n   * Loading background color while generating map cache image or loading the map\n   * Default color is light gray.\n   *\n   */\n  loadingBackgroundColor: ColorPropType,\n\n  /**\n   * Loading indicator color while generating map cache image or loading the map\n   * Default color is gray color for iOS, theme color for Android.\n   *\n   */\n  loadingIndicatorColor: ColorPropType,\n\n  /**\n   * If `false` the user won't be able to change the map region being displayed.\n   * Default value is `true`.\n   *\n   */\n  scrollEnabled: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to adjust the camera’s pitch angle.\n   * Default value is `true`.\n   *\n   */\n  pitchEnabled: PropTypes.bool,\n\n  /**\n   * If `false` will hide 'Navigate' and 'Open in Maps' buttons on marker press\n   * Default value is `true`.\n   *\n   * @platform android\n   */\n  toolbarEnabled: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether on marker press the map will move to the pressed marker\n   * Default value is `true`\n   *\n   * @platform android\n   */\n  moveOnMarkerPress: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether the map shows scale information.\n   * Default value is `false`\n   *\n   * @platform ios\n   */\n  showsScale: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether the map displays extruded building information.\n   * Default value is `true`.\n   */\n  showsBuildings: PropTypes.bool,\n\n  /**\n   * A Boolean value indicating whether the map displays traffic information.\n   * Default value is `false`.\n   */\n  showsTraffic: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether indoor maps should be enabled.\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  showsIndoors: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether indoor level picker should be enabled.\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  showsIndoorLevelPicker: PropTypes.bool,\n\n  /**\n   * The map type to be displayed.\n   *\n   * - standard: standard road map (default)\n   * - satellite: satellite view\n   * - hybrid: satellite view with roads and points of interest overlayed\n   * - terrain: topographic view\n   * - none: no base map\n   */\n  mapType: PropTypes.oneOf(Object.values(MAP_TYPES)),\n\n  /**\n   * The region to be displayed by the map.\n   *\n   * The region is defined by the center coordinates and the span of\n   * coordinates to display.\n   */\n  region: PropTypes.shape({\n    /**\n     * Coordinates for the center of the map.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n\n    /**\n     * Difference between the minimun and the maximum latitude/longitude\n     * to be displayed.\n     */\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * The initial region to be displayed by the map.  Use this prop instead of `region`\n   * only if you don't want to control the viewport of the map besides the initial region.\n   *\n   * Changing this prop after the component has mounted will not result in a region change.\n   *\n   * This is similar to the `initialValue` prop of a text input.\n   */\n  initialRegion: PropTypes.shape({\n    /**\n     * Coordinates for the center of the map.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n\n    /**\n     * Difference between the minimun and the maximum latitude/longitude\n     * to be displayed.\n     */\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * The camera view the map should use.\n   *\n   * Use the camera system, instead of the region system, if you need control over\n   * the pitch or heading.\n   */\n  camera: CameraShape,\n\n  /**\n   * The initial camera view the map should use.  Use this prop instead of `camera`\n   * only if you don't want to control the camera of the map besides the initial view.\n   *\n   * Use the camera system, instead of the region system, if you need control over\n   * the pitch or heading.\n   *\n   * Changing this prop after the component has mounted will not result in a camera change.\n   *\n   * This is similar to the `initialValue` prop of a text input.\n   */\n  initialCamera: CameraShape,\n\n  /**\n   * A Boolean indicating whether to use liteMode for android\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  liteMode: PropTypes.bool,\n\n  /**\n   * (Google Maps only)\n   *\n   * Padding that is used by the Google Map View to position\n   * the camera, legal labels and buttons\n   *\n   */\n  mapPadding: EdgeInsetsPropType,\n\n  /**\n   * (Google Maps only, iOS)\n   *\n   * Whether the safe area padding is added to the Google Map View padding.\n   * This affects where markers, compass, Google logo etc. are placed on the view.\n   *\n   */\n  paddingAdjustmentBehavior: PropTypes.oneOf(['always', 'automatic', 'never']),\n\n  /**\n   * Maximum size of area that can be displayed.\n   *\n   * @platform ios\n   */\n  maxDelta: PropTypes.number,\n\n  /**\n   * Minimum size of area that can be displayed.\n   *\n   * @platform ios\n   */\n  minDelta: PropTypes.number,\n\n  /**\n   * Insets for the map's legal label, originally at bottom left of the map.\n   * See `EdgeInsetsPropType.js` for more information.\n   */\n  legalLabelInsets: EdgeInsetsPropType,\n\n  /**\n   * Callback that is called once the map is fully loaded.\n   */\n  onMapReady: PropTypes.func,\n\n  /**\n   * Callback that is called once all tiles have been loaded\n   * (or failed permanently) and labels have been rendered.\n   */\n  onMapLoaded: PropTypes.func,\n\n  /**\n   * Callback that is called once the kml is fully loaded.\n   */\n  onKmlReady: PropTypes.func,\n\n  /**\n   * Callback that is called continuously when the user is dragging the map.\n   */\n  onRegionChange: PropTypes.func,\n\n  /**\n   * Callback that is called once, when the user is done moving the map.\n   */\n  onRegionChangeComplete: PropTypes.func,\n\n  /**\n   * Callback that is called when user taps on the map.\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * Callback that is called when user double taps on the map.\n   */\n  onDoublePress: PropTypes.func,\n\n  /**\n   * Callback that is called when user makes a \"long press\" somewhere on the map.\n   */\n  onLongPress: PropTypes.func,\n\n  /**\n   * Callback that is called when the underlying map figures our users current location.\n   */\n  onUserLocationChange: PropTypes.func,\n\n  /**\n   * Callback that is called when user makes a \"drag\" somewhere on the map\n   */\n  onPanDrag: PropTypes.func,\n\n  /**\n   * Callback that is called when user click on a POI\n   */\n  onPoiClick: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map is tapped by the user.\n   */\n  onMarkerPress: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map becomes selected. This will be called when\n   * the callout for that marker is about to be shown.\n   *\n   * @platform ios\n   */\n  onMarkerSelect: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map becomes deselected. This will be called when\n   * the callout for that marker is about to be hidden.\n   *\n   * @platform ios\n   */\n  onMarkerDeselect: PropTypes.func,\n\n  /**\n   * Callback that is called when a callout is tapped by the user.\n   */\n  onCalloutPress: PropTypes.func,\n\n  /**\n   * Callback that is called when the user initiates a drag on a marker (if it is draggable)\n   */\n  onMarkerDragStart: PropTypes.func,\n\n  /**\n   * Callback called continuously as a marker is dragged\n   */\n  onMarkerDrag: PropTypes.func,\n\n  /**\n   * Callback that is called when a drag on a marker finishes. This is usually the point you\n   * will want to setState on the marker's coordinate again\n   */\n  onMarkerDragEnd: PropTypes.func,\n\n  /**\n   * Minimum zoom value for the map, must be between 0 and 20\n   */\n  minZoomLevel: PropTypes.number,\n\n  /**\n   * Maximum zoom value for the map, must be between 0 and 20\n   */\n  maxZoomLevel: PropTypes.number,\n\n  /**\n   * Url KML Source\n   */\n  kmlSrc: PropTypes.string,\n\n  /**\n   * Offset Point x y for compass location.\n   *\n   * @platform ios\n   */\n  compassOffset: PointPropType,\n\n  /**\n   * Callback that is called when a level is activated on a indoor building.\n   */\n  onIndoorLevelActivated: PropTypes.func,\n\n  /**\n   * Callback that is called when a Building is focused.\n   */\n  onIndoorBuildingFocused: PropTypes.func,\n};\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isReady: Platform.OS === 'ios',\n    };\n\n    this._onMapReady = this._onMapReady.bind(this);\n    this._onMarkerPress = this._onMarkerPress.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onLayout = this._onLayout.bind(this);\n  }\n\n  getChildContext() {\n    return { provider: this.props.provider };\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    if (\n      this.state.isReady &&\n      this.props.customMapStyle !== prevProps.customMapStyle\n    ) {\n      this._updateStyle(this.props);\n    }\n    return this.props.region || null;\n  }\n\n  componentDidUpdate(prevProps, prevState, region) {\n    const a = this.__lastRegion;\n    const b = region;\n    if (!a || !b) {\n      return;\n    }\n    if (\n      a.latitude !== b.latitude ||\n      a.longitude !== b.longitude ||\n      a.latitudeDelta !== b.latitudeDelta ||\n      a.longitudeDelta !== b.longitudeDelta\n    ) {\n      this.map.setNativeProps({ region: b });\n    }\n  }\n\n  componentDidMount() {\n    const { isReady } = this.state;\n    if (isReady) {\n      this._updateStyle(this.props);\n    }\n  }\n\n  _updateStyle(props) {\n    const { customMapStyle } = props;\n    this.map.setNativeProps({\n      customMapStyleString: JSON.stringify(customMapStyle),\n    });\n  }\n\n  _onMapReady() {\n    const { region, initialRegion, onMapReady } = this.props;\n    if (region) {\n      this.map.setNativeProps({ region });\n    } else if (initialRegion) {\n      this.map.setNativeProps({ initialRegion });\n    }\n    this._updateStyle(this.props);\n    this.setState({ isReady: true }, () => {\n      if (onMapReady) {\n        onMapReady();\n      }\n    });\n  }\n\n  _onLayout(e) {\n    const { layout } = e.nativeEvent;\n    if (!layout.width || !layout.height) {\n      return;\n    }\n    if (this.state.isReady && !this.__layoutCalled) {\n      const { region, initialRegion } = this.props;\n      if (region) {\n        this.__layoutCalled = true;\n        this.map.setNativeProps({ region });\n      } else if (initialRegion) {\n        this.__layoutCalled = true;\n        this.map.setNativeProps({ initialRegion });\n      }\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  }\n\n  _onMarkerPress(event) {\n    if (this.props.onMarkerPress) {\n      this.props.onMarkerPress(event.nativeEvent);\n    }\n  }\n\n  _onChange(event) {\n    this.__lastRegion = event.nativeEvent.region;\n    if (event.nativeEvent.continuous) {\n      if (this.props.onRegionChange) {\n        this.props.onRegionChange(event.nativeEvent.region);\n      }\n    } else if (this.props.onRegionChangeComplete) {\n      this.props.onRegionChangeComplete(event.nativeEvent.region);\n    }\n  }\n\n  getCamera() {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.getCamera(this._getHandle());\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('getCamera', []);\n    }\n    return Promise.reject('getCamera not supported on this platform');\n  }\n\n  setCamera(camera) {\n    this._runCommand('setCamera', [camera]);\n  }\n\n  animateCamera(camera, opts) {\n    this._runCommand('animateCamera', [camera, (opts && opts.duration) || 500]);\n  }\n\n  animateToNavigation(location, bearing, angle, duration) {\n    console.warn(\n      'animateToNavigation() is deprecated, use animateCamera() instead'\n    );\n    this._runCommand('animateToNavigation', [\n      location,\n      bearing,\n      angle,\n      duration || 500,\n    ]);\n  }\n\n  animateToRegion(region, duration) {\n    this._runCommand('animateToRegion', [region, duration || 500]);\n  }\n\n  animateToCoordinate(latLng, duration) {\n    console.warn(\n      'animateToCoordinate() is deprecated, use animateCamera() instead'\n    );\n    this._runCommand('animateToCoordinate', [latLng, duration || 500]);\n  }\n\n  animateToBearing(bearing, duration) {\n    console.warn(\n      'animateToBearing() is deprecated, use animateCamera() instead'\n    );\n    this._runCommand('animateToBearing', [bearing, duration || 500]);\n  }\n\n  animateToViewingAngle(angle, duration) {\n    console.warn(\n      'animateToViewingAngle() is deprecated, use animateCamera() instead'\n    );\n    this._runCommand('animateToViewingAngle', [angle, duration || 500]);\n  }\n\n  fitToElements(animated) {\n    this._runCommand('fitToElements', [animated]);\n  }\n\n  fitToSuppliedMarkers(markers, options = {}) {\n    const {\n      edgePadding = { top: 0, right: 0, bottom: 0, left: 0 },\n      animated = true,\n    } = options;\n\n    this._runCommand('fitToSuppliedMarkers', [markers, edgePadding, animated]);\n  }\n\n  fitToCoordinates(coordinates = [], options = {}) {\n    const {\n      edgePadding = { top: 0, right: 0, bottom: 0, left: 0 },\n      animated = true,\n    } = options;\n\n    this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);\n  }\n\n  /**\n   * Get visible boudaries\n   *\n   * @return Promise Promise with the bounding box ({ northEast: <LatLng>, southWest: <LatLng> })\n   */\n  async getMapBoundaries() {\n    if (Platform.OS === 'android') {\n      return await NativeModules.AirMapModule.getMapBoundaries(\n        this._getHandle()\n      );\n    } else if (Platform.OS === 'ios') {\n      return await this._runCommand('getMapBoundaries', []);\n    }\n    return Promise.reject('getMapBoundaries not supported on this platform');\n  }\n\n  setMapBoundaries(northEast, southWest) {\n    this._runCommand('setMapBoundaries', [northEast, southWest]);\n  }\n\n  setIndoorActiveLevelIndex(activeLevelIndex) {\n    this._runCommand('setIndoorActiveLevelIndex', [activeLevelIndex]);\n  }\n\n  /**\n   * Takes a snapshot of the map and saves it to a picture\n   * file or returns the image as a base64 encoded string.\n   *\n   * @param config Configuration options\n   * @param [config.width] Width of the rendered map-view (when omitted actual view width is used).\n   * @param [config.height] Height of the rendered map-view (when omitted actual height is used).\n   * @param [config.region] Region to render (Only supported on iOS).\n   * @param [config.format] Encoding format ('png', 'jpg') (default: 'png').\n   * @param [config.quality] Compression quality (only used for jpg) (default: 1.0).\n   * @param [config.result] Result format ('file', 'base64') (default: 'file').\n   *\n   * @return Promise Promise with either the file-uri or base64 encoded string\n   */\n  takeSnapshot(args) {\n    // For the time being we support the legacy API on iOS.\n    // This will be removed in a future release and only the\n    // new Promise style API shall be supported.\n    if (Platform.OS === 'ios' && arguments.length === 4) {\n      console.warn(\n        'Old takeSnapshot API has been deprecated; will be removed in the near future'\n      );\n      const width = arguments[0];\n      const height = arguments[1];\n      const region = arguments[2];\n      const callback = arguments[3];\n      this._runCommand('takeSnapshot', [\n        width || 0,\n        height || 0,\n        region || {},\n        'png',\n        1,\n        'legacy',\n        callback,\n      ]);\n      return undefined;\n    }\n\n    // Sanitize inputs\n    const config = {\n      width: args.width || 0,\n      height: args.height || 0,\n      region: args.region || {},\n      format: args.format || 'png',\n      quality: args.quality || 1.0,\n      result: args.result || 'file',\n    };\n    if (config.format !== 'png' && config.format !== 'jpg') {\n      throw new Error('Invalid format specified');\n    }\n    if (config.result !== 'file' && config.result !== 'base64') {\n      throw new Error('Invalid result specified');\n    }\n\n    // Call native function\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);\n    } else if (Platform.OS === 'ios') {\n      return new Promise((resolve, reject) => {\n        this._runCommand('takeSnapshot', [\n          config.width,\n          config.height,\n          config.region,\n          config.format,\n          config.quality,\n          config.result,\n          (err, snapshot) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(snapshot);\n            }\n          },\n        ]);\n      });\n    }\n    return Promise.reject('takeSnapshot not supported on this platform');\n  }\n\n  /**\n   * Convert a map coordinate to user-space point\n   *\n   * @param coordinate Coordinate\n   * @param [coordinate.latitude] Latitude\n   * @param [coordinate.longitude] Longitude\n   *\n   * @return Promise Promise with the point ({ x: Number, y: Number })\n   */\n  pointForCoordinate(coordinate) {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.pointForCoordinate(\n        this._getHandle(),\n        coordinate\n      );\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('pointForCoordinate', [coordinate]);\n    }\n    return Promise.reject('pointForCoordinate not supported on this platform');\n  }\n\n  /**\n   * Convert a user-space point to a map coordinate\n   *\n   * @param point Point\n   * @param [point.x] X\n   * @param [point.x] Y\n   *\n   * @return Promise Promise with the coordinate ({ latitude: Number, longitude: Number })\n   */\n  coordinateForPoint(point) {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.coordinateForPoint(\n        this._getHandle(),\n        point\n      );\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('coordinateForPoint', [point]);\n    }\n    return Promise.reject('coordinateForPoint not supported on this platform');\n  }\n\n  /**\n   * Get markers' centers and frames in user-space coordinates\n   *\n   * @param onlyVisible boolean true to include only visible markers, false to include all\n   *\n   * @return Promise Promise with { <identifier>: { point: Point, frame: Frame } }\n   */\n  getMarkersFrames(onlyVisible = false) {\n    if (Platform.OS === 'ios') {\n      return this._runCommand('getMarkersFrames', [onlyVisible]);\n    }\n    return Promise.reject('getMarkersFrames not supported on this platform');\n  }\n\n  /**\n   * Get bounding box from region\n   *\n   * @param region Region\n   *\n   * @return Object Object bounding box ({ northEast: <LatLng>, southWest: <LatLng> })\n   */\n  boundingBoxForRegion(region) {\n    return {\n      northEast: {\n        latitude: region.latitude + region.latitudeDelta / 2,\n        longitude: region.longitude + region.longitudeDelta / 2,\n      },\n      southWest: {\n        latitude: region.latitude - region.latitudeDelta / 2,\n        longitude: region.longitude - region.longitudeDelta / 2,\n      },\n    };\n  }\n\n  _uiManagerCommand(name) {\n    const UIManager = NativeModules.UIManager;\n    const componentName = getAirMapName(this.props.provider);\n\n    if (!UIManager.getViewManagerConfig) {\n      // RN < 0.58\n      return UIManager[componentName].Commands[name];\n    }\n\n    // RN >= 0.58\n    return UIManager.getViewManagerConfig(componentName).Commands[name];\n  }\n\n  _mapManagerCommand(name) {\n    const managerName = getAirMapName(this.props.provider);\n\n    if (managerName === 'UI') {\n      const UIManager = NativeModules.UIManager;\n      if (!UIManager.getViewManagerConfig) {\n        // RN < 0.58\n        return UIManager[name];\n      }\n\n      // RN >= 0.58\n      return UIManager.getViewManagerConfig(name);\n    }\n\n    return NativeModules[`${getAirMapName(this.props.provider)}Manager`][name];\n  }\n\n  _getHandle() {\n    return findNodeHandle(this.map);\n  }\n\n  _runCommand(name, args) {\n    switch (Platform.OS) {\n      case 'android':\n        return NativeModules.UIManager.dispatchViewManagerCommand(\n          this._getHandle(),\n          this._uiManagerCommand(name),\n          args\n        );\n\n      case 'ios':\n        return this._mapManagerCommand(name)(this._getHandle(), ...args);\n\n      default:\n        return Promise.reject(`Invalid platform was passed: ${Platform.OS}`);\n    }\n  }\n\n  render() {\n    let props;\n\n    if (this.state.isReady) {\n      props = {\n        region: null,\n        initialRegion: null,\n        onMarkerPress: this._onMarkerPress,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout,\n        ...this.props,\n      };\n      if (\n        Platform.OS === 'ios' &&\n        props.provider === ProviderConstants.PROVIDER_DEFAULT &&\n        GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)\n      ) {\n        props.mapType = MAP_TYPES.standard;\n      }\n      props.handlePanDrag = !!props.onPanDrag;\n    } else {\n      props = {\n        style: this.props.style,\n        region: null,\n        initialRegion: null,\n        onMarkerPress: this._onMarkerPress,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout,\n      };\n    }\n\n    if (Platform.OS === 'android' && this.props.liteMode) {\n      return (\n        <AIRMapLite\n          ref={ref => {\n            this.map = ref;\n          }}\n          {...props}\n        />\n      );\n    }\n\n    const AIRMap = getAirMapComponent(this.props.provider);\n\n    return (\n      <AIRMap\n        ref={ref => {\n          this.map = ref;\n        }}\n        {...props}\n      />\n    );\n  }\n}\n\nMapView.propTypes = propTypes;\nMapView.viewConfig = viewConfig;\nMapView.childContextTypes = childContextTypes;\n\nMapView.MAP_TYPES = MAP_TYPES;\n\nconst nativeComponent = Component =>\n  requireNativeComponent(Component, MapView, {\n    nativeOnly: {\n      onChange: true,\n      onMapReady: true,\n      onKmlReady: true,\n      handlePanDrag: true,\n    },\n  });\nconst airMaps = {\n  default: nativeComponent('AIRMap'),\n};\nif (Platform.OS === 'android') {\n  airMaps.google = airMaps.default;\n} else {\n  airMaps.google = googleMapIsInstalled\n    ? nativeComponent('AIRGoogleMap')\n    : createNotSupportedComponent(\n        'react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.'\n      );\n}\nconst getAirMapComponent = provider => airMaps[provider || 'default'];\n\nlet AIRMapLite;\nif (!NativeModules.UIManager.getViewManagerConfig) {\n  // RN < 0.58\n  AIRMapLite =\n    NativeModules.UIManager.AIRMapLite &&\n    requireNativeComponent('AIRMapLite', MapView, {\n      nativeOnly: {\n        onChange: true,\n        onMapReady: true,\n        handlePanDrag: true,\n      },\n    });\n} else {\n  // RN >= 0.58\n  AIRMapLite =\n    NativeModules.UIManager.getViewManagerConfig('AIRMapLite') &&\n    requireNativeComponent('AIRMapLite', MapView, {\n      nativeOnly: {\n        onChange: true,\n        onMapReady: true,\n        handlePanDrag: true,\n      },\n    });\n}\n\nexport const Animated = RNAnimated.createAnimatedComponent(MapView);\n\nexport const ProviderPropType = PropTypes.oneOf(\n  Object.values(ProviderConstants)\n);\n\n/**\n * TODO:\n * All of these properties on MapView are unecessary since they can be imported\n * individually with the es6 exports in index.js. Removing them is a breaking change,\n * but potentially allows for better dead code elimination since references are not\n * kept to components which are never used.\n */\n\nMapView.Marker = MapMarker;\nMapView.Polyline = MapPolyline;\nMapView.Polygon = MapPolygon;\nMapView.Circle = MapCircle;\nMapView.UrlTile = MapUrlTile;\nMapView.MapWMSTile = MapWMSTile;\nMapView.LocalTile = MapLocalTile;\nMapView.Heatmap = MapHeatMap;\nMapView.Overlay = MapOverlay;\nMapView.Callout = MapCallout;\nMapView.CalloutSubview = MapCalloutSubview;\nObject.assign(MapView, ProviderConstants);\nMapView.ProviderPropType = ProviderPropType;\n\nMapView.Animated = Animated;\nMapView.AnimatedRegion = AnimatedRegion;\n\nMapView.Geojson = Geojson;\n\nexport default MapView;\n"]},"metadata":{},"sourceType":"module"}